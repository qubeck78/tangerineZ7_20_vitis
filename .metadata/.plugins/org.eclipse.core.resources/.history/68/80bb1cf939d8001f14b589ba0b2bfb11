#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "platform.h"

#include "bsp.h"
#include "osAlloc.h"
#include "osFile.h"
#include "gfFont.h"
#include "gfBitmap.h"
#include "gfJPEG.h"
#include "gfDrawing.h"
#include "osUIEvents.h"
#include "gfAudio.h"
#include "mp3dec.h"

//defined in gfxLib/bsp.c
extern tgfTextOverlay  con;

tgfBitmap   screen;
tosFile     in;


static uint32_t waitKey()
{
    uint32_t    keyPressed;
    tosUIEvent  event;

    keyPressed = 0;

    do
    {
        while( !osGetUIEvent( &event ) )
        {
            if( event.type == OS_EVENT_TYPE_KEYBOARD_KEYPRESS )
            {
                keyPressed = 1;

                if( event.arg1 ==  _KEYCODE_PAUSE )
                {
                    //reboot();
                }
            }
        }
        delayMs( 10 );

    }while( !keyPressed );

    return 0;
}


int main()
{
   uint32_t       j;
   tosUIEvent     event;
   uint32_t         i;
   uint32_t         rv;
   uint32_t         nbr;

   MP3FrameInfo     mp3FrameInfo;
   HMP3Decoder      hMP3Decoder;
   char             mp3FileName[256];

   uint32_t         mp3Size;
   int              bytesLeft;
   int16_t         *audioBuffer;
   uint8_t         *mp3Buffer;
   uint8_t         *currentMp3;
   int32_t          offset;
   uint32_t         frameSize;

   init_platform();
   bspInit();

   screen.flags      = 0;
   screen.width      = 320;
   screen.height     = 240;
   screen.rowWidth   = 320;
   screen.buffer     = (void*)0x41000000;   //fixed frame buffer location for now

   setVideoMode( _VIDEOMODE_320_TEXT80_OVER_GFX );

   gfFillRect( &screen, 0, 0, 319, 239, gfColor( 0, 0, 0) );

   printf( "\n" );
   printf( "        |.\\__/.|    (~\\ \n" );
   printf( "        | O O  |     ) ) \n" );
   printf( "      _.|  T   |_   ( (  \n" );
   printf( "   .-- ((---- ((-------------.\n" );
   printf( "   | Zynq MP3Player 20250119 |\n" );
   printf( "   |     tangerine Z7_20     |\n" );
   printf( "   |     SOC:%08x        |\n", (int)bsp->version );
   printf( "   `-------------------------`\n" );
   printf( "\n\n\n");


   osFInit();
   osUIEventsInit();

   audioBuffer = ( int16_t * )osAlloc( 65536, OS_ALLOC_MEMF_CHIP );

   if( !audioBuffer )
   {
     printf( "can't alloc audio buffer - press pause to reboot\n" );

     do{

         waitKey();

     }while( 1 );

   }

   hMP3Decoder = MP3InitDecoder();

   if( !hMP3Decoder )
   {
     printf( "Can't init mp3 decoder - press pause to reboot\n" );

     do{

         waitKey();

     }while( 1 );
   }


   gfAudioInit();


   strcpy( mp3FileName, "0:/snd/bloom1.mp3" );

   mp3Size = osFSize( mp3FileName );

   if( !mp3Size )
   {
       printf( "Can't get size of %s - press pause to reboot\n", mp3FileName );

       do{

           waitKey();

       }while( 1 );

   }

   mp3Buffer   = (uint8_t*) osAlloc( mp3Size, OS_ALLOC_MEMF_CHIP );


   if( !mp3Buffer )
   {
       printf( "Can't alloc %d bytes for mp3 - press pause to reboot\n" );

       do{

           waitKey();

       }while( 1 );

   }

   printf( "Loading %s (%d)\n", mp3FileName, mp3Size );

   if( osFOpen( &in, mp3FileName, OS_FILE_READ ) )
   {
       printf( "Can't open %s - press pause to reboot\n", mp3FileName );

       do{

           waitKey();

       }while( 1 );
   }

   nbr = 0;

   osFRead( &in, mp3Buffer, mp3Size, &nbr );

   osFClose( &in );

   printf( "Playing %s\n", mp3FileName );


   bytesLeft       = mp3Size;
   currentMp3      = mp3Buffer;

   //decode first frame

   offset = MP3FindSyncWord( currentMp3, bytesLeft ) ;

   //todo check if offset < 0

   currentMp3  += offset;
   bytesLeft   -= offset;

   MP3Decode( hMP3Decoder,&currentMp3, &bytesLeft, &audioBuffer[0], 0 );
   MP3GetLastFrameInfo( hMP3Decoder, &mp3FrameInfo );

   frameSize = mp3FrameInfo.outputSamps;

   gfAudioConfigure( GF_AUDIO_SAMPLING_RATE_44100, 1 );

   printf( "sampleRate:%d\n", mp3FrameInfo.samprate );
   printf( "frameSize:%d\n", frameSize );

   //gfAudioPlayDMA( audioBuffer, frameSize * 4, GF_AUDIO_FORMAT_STEREO_16BIT, GF_AUDIO_FLAG_DMA_LOOP );

   gfAudioPlayFifo( audioBuffer, frameSize );


   while( bytesLeft > 0 )
   {


       offset = MP3FindSyncWord( currentMp3, bytesLeft ) ;

       if (offset < 0)
       {
           break;
       }

       currentMp3  += offset;
       bytesLeft   -= offset;

       MP3Decode( hMP3Decoder,&currentMp3, &bytesLeft, &audioBuffer[0], 0 );

       gfAudioPlayFifo( audioBuffer, frameSize );

   }

   printf( "done\n" );

   gfAudioStopDMA();

   do{
       waitKey();


   }while( 1 );


}
